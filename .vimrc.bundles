" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################

set nocompatible " be iMproved, required
filetype off " required! turn off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()


" ################### 插件管理 ###################

" 使用Vundle来管理插件
" vim plugin bundle control, command model
"     :BundleInstall     install 安装配置的插件
"     :BundleInstall!    update  更新
"     :BundleClean       remove plugin not in list 删除本地无用插件
Plugin 'VundleVim/Vundle.vim'

" ################### 快速导航 ###################
"目录导航
Plugin 'scrooloose/nerdtree'
" NerdTree {
    if isdirectory(expand("~/.vim/bundle/nerdtree"))
        "使用 NERDTree 插件查看工程文件。设置快捷键
        "map <F3> :NERDTreeToggle<CR>
        "在树中找到当前文件
        let NERDTreeQuitOnOpen=1 "NERDTree中打开文件后自动关闭NERDTree窗口 
        noremap <silent> <F3> :NERDTreeFind<cr> "打开NERDTree,定位到当前文件

        "open a NERDTree automatically when vim starts up
        "autocmd VimEnter * NERDTree
        "open a NERDTree automatically when vim starts up if no files were specified
        "autocmd StdinReadPre * let s:std_in=1
        "autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

        let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]

        "是否高亮显示光标所在行
        let NERDTreeHighlightCursorline=1
        "设置NERDTree子窗口位置
        let NERDTreeWinPos="left"
        "设置树窗口宽度
        let NERDTreeWinSize=30
        "显示隐藏文件
        let NERDTreeShowHidden=1
        "删除文件时自动删除文件对应 buffer
        let NERDTreeAutoDeleteBuffer=1
        "打开文件后是否关闭NerdTree窗口
        let NERDTreeQuitOnOpen=0
        "是否默认显示行号      
        let NERDTreeShowLineNumbers=1

        " s/v 分屏打开文件
        let g:NERDTreeMapOpenSplit = 's'
        let g:NERDTreeMapOpenVSplit = 'v'

    endif
" }


Plugin 'jistr/vim-nerdtree-tabs'
" nerdtree-tabs {
    if isdirectory(expand("~/.vim/bundle/vim-nerdtree-tabs"))
        map <leader>n <plug>NERDTreeTabsToggle<CR>
        "Open NERDTree on console vim startup (default: 0)
        let g:nerdtree_tabs_open_on_console_startup=0

        "Do not open NERDTree if vim starts in diff mode (default: 1)
        let g:nerdtree_tabs_no_startup_for_diff=1

    endif
" }


Plugin 'Xuyuanp/nerdtree-git-plugin'
" nerdtree-git-plugin {
    if isdirectory(expand("~/.vim/bundle/nerdtree-git-plugin"))
        let g:NERDTreeIndicatorMapCustom = {
            \ "Modified"  : "mod",
            \ "Staged"    : "=",
            \ "Untracked" : "untr",
            \ "Renamed"   : "r",
            \ "Unmerged"  : "unmerg",
            \ "Deleted"   : "del",
            \ "Dirty"     : "-",
            \ "Clean"     : "",
            \ "Unknown"   : "?"
            \ }
    endif
" }


Plugin 'airblade/vim-gitgutter'
" vim-gitgutter {
    if isdirectory(expand("~/.vim/bundle/vim-gitgutter"))
        let g:gitgutter_max_signs = 500  " default value
        " jump to next hunk (change): ]c\
        " jump to previous hunk (change): [c
        " preview hunk: <leader>hp
        " stage hunk: <leader>hs
        " undo hunk: <leader>hu
    endif
" }


" Plugin 'nathanaelkane/vim-indent-guides'
" " indent-guides {
"     if isdirectory(expand("~/.vim/bundle/vim-indent-guides"))
"         " 随 vim 自启动
"          let g:indent_guides_enable_on_vim_startup=1
"         " 从第二层开始可视化显示缩进
"          let g:indent_guides_start_level=2
"         " 色块宽度
"          let g:indent_guides_guide_size=1
"         " 快捷键 ig 开/关缩进可视化
"         nmap <silent> <leader>ig <Plug>IndentGuidesToggle
" 
"     endif
" " }


" 快速选中编辑
"Plugin 'vim-multiple-cursors'


Plugin 'jlanzarotta/bufexplorer'


" Plugin 'nvie/vim-flake8'                                                           
" vim-flake8 {                                                                     
    if isdirectory(expand("~/.vim/bundle/vim-flake8"))                             
        autocmd FileType python map <buffer> <F9> :call Flake8()<CR>               
        " run the Flake8 check every time you write a Python file
        autocmd BufWritePost *.py call Flake8()
        " To customize the location of quick fix
        " window(topleft,botright,leftabove,rightbelow)
        let g:flake8_quickfix_location="rightbelow"
        " To customize the height of quick fix window
        let g:flake8_quickfix_height=2
        " To customize whether the quickfix window opens, default=1
        let g:flake8_show_quickfix=1 
        " To customize whether the show signs in the gutter, default=0
        let g:flake8_show_in_gutter=1
        " To use colors defined in the colorscheme
        highlight link Flake8_Error      Error
        highlight link Flake8_Warning    WarningMsg
        highlight link Flake8_Complexity WarningMsg
        highlight link Flake8_Naming     WarningMsg
        highlight link Flake8_PyFlake    WarningMsg
    endif                                                                          
" }


Plugin 'klen/python-mode'
" python-mode {
    if isdirectory(expand("~/.vim/bundle/python-mode"))
        let g:pymode_rope = 0
        let g:pymode_lint_checkers = ['pyflakes', 'pep8']
        let g:pymode_lint_unmodified = 1
        let g:pymode_quickfix_minheight = 1
        let g:pymode_quickfix_maxheight = 3
    endif
"  }


Plugin 'tpope/vim-fugitive'
" vim-fugitive {
    if isdirectory(expand("~/.vim/bundle/vim-fugitive"))
        nnoremap <leader>gd :Gdiff<CR>
        "按-可快速add，按C可进行commit
        nnoremap <leader>gs :Gstatus<CR>
        nnoremap <leader>gb :Gblame<CR>
    endif
" }


" ################### 主题插件 ###################
Plugin 'altercation/vim-colors-solarized'
" 必须把~/.vim/bundle/vim-colors-solarized复制到~/.vim/colors/，否则提示Cannot
" find color scheme solarized
" cp ~/.vim/bundle/vim-colors-solarized/colors/solarized.vim ~/.vim/colors/
" solarized {
    if isdirectory(expand("~/.vim/bundle/vim-colors-solarized"))
        syntax on
        let g:solarized_termcolors=256
        set background=dark
        let g:solarized_termtrans=1
        let g:solarized_degrade=1
        let g:solarized_contrast = "normal"
        let g:solarized_visibility= "low"
"        colorscheme solarized

    endif
" }


" 快速移动
Plugin 'easymotion/vim-easymotion'
" vim-easymotion {
    if isdirectory(expand("~/.vim/bundle/vim-easymotion"))
        " makes EasyMotion work similarly to Vim's smartcase option for global
        " searches
        let g:EasyMotion_smartcase = 1

        " <Leader><Leader>w
        " <Leader><Leader>b
        " <Leader><Leader>s
        map <Leader>l <Plug>(easymotion-lineforward)
        map <Leader>j <Plug>(easymotion-j)
        map <Leader>k <Plug>(easymotion-k)
        map <Leader>h <Plug>(easymotion-linebackward)
        map <Leader>. <Plug>(easymotion-repeat)

    endif
" }


Plugin 'majutsushi/tagbar'
" tagbar {
    if isdirectory(expand("~/.vim/bundle/tagbar"))
        let g:tagbar_width=30  
        " 启动时自动focus
        let g:tagbar_autofocus = 1
        noremap <silent> <F8> :TagbarToggle<CR>

    endif
" }


" Plugin 'vim-airline/vim-airline'


Plugin 'ctrlpvim/ctrlp.vim'
" ctrlp.vim {
    if isdirectory(expand("~/.vim/bundle/ctrlp.vim"))
        let g:ctrlp_map = '<c-p>'
        let g:ctrlp_cmd = 'CtrlP'
    endif
" }


Plugin 'davidhalter/jedi-vim'
" jedi-vim {
    if isdirectory(expand("~/.vim/bundle/jedi-vim"))
        let g:jedi#completions_command = "<C-N>"
        let g:jedi#goto_command = "<leader>d"
        let g:jedi#goto_assignments_command = "<leader>g"
        let g:jedi#goto_definitions_command = "-"
        let g:jedi#documentation_command = "K"
        let g:jedi#usages_command = "<leader>n"
        let g:jedi#completions_command = "<C-Space>"
        let g:jedi#rename_command = "<leader>r"
        let g:jedi#auto_initialization = 1
        let g:jedi#popup_on_dot = 0
        let g:jedi#completions_enabled = 0
        let g:jedi#smart_auto_mappings = 0

    endif
"  }


" 代码自动补全
" Plugin 'Valloric/YouCompleteMe'
" YouCompleteMe {
    if isdirectory(expand("~/.vim/bundle/YouCompleteMe"))
        " 补全功能在注释中同样有效
        let g:ycm_complete_in_comments = 1
        " 补全功能在字符串输入中同样有效
        let g:ycm_complete_in_strings = 1
        " 注释和字符串中的文字也会被收入补全
        let g:ycm_collect_identifiers_from_comments_and_strings = 1   
        " 禁止缓存匹配项，每次都重新生成匹配项
        let g:ycm_cache_omnifunc = 0
        " 语法关键字补全         
        let g:ycm_seed_identifiers_with_syntax = 1
        " 补全内容不以分割子窗口形式出现，只显示补全列表
        set completeopt -=preview

        " 跳转到定义
        nnoremap <leader>gl :YcmCompleter GoToDeclaration<CR>
        " 跳转到声明
        nnoremap <leader>gf :YcmCompleter GoToDefinition<CR>
        nnoremap <leader>gt :YcmCompleter GoTo<CR>
        nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>

        " 菜单配色
        highlight Pmenu ctermfg=2 ctermbg=3 guifg=#005f87 guibg=#EEE8D5
        " 选中项配色
        highlight PmenuSel ctermfg=2 ctermbg=3 guifg=#AFD700 guibg=#106900
    endif
"  }

Plugin 'fatih/vim-go'
" vim-go {
    if isdirectory(expand("~/.vim/bundle/vim-go"))
    endif
" }

 call vundle#end()            " required
 filetype plugin indent on    " required
